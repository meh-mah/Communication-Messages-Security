/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package client;

import java.lang.reflect.InvocationTargetException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author M&M
 */
public class ClientUI extends javax.swing.JFrame {
    private SSLClient client;

    /** Creates new form FileCatalogClientUI */
    public ClientUI(String[] args) {
        initComponents();
        client = new SSLClient(this, args);
    }

    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        loginMenuItem = new javax.swing.JMenuItem();
        logoutMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        registerMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("File Catalog");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 320, -1));

        sendButton.setText("SEND");
        sendButton.setEnabled(false);
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });
        getContentPane().add(sendButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 60, -1, -1));

        jMenu1.setText("Catalog");

        loginMenuItem.setText("Login...");
        loginMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(loginMenuItem);

        logoutMenuItem.setText("Logout");
        logoutMenuItem.setEnabled(false);
        logoutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(logoutMenuItem);
        jMenu1.add(jSeparator1);

        registerMenuItem.setText("Register...");
        registerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(registerMenuItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        setSize(new java.awt.Dimension(501, 203));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

private void loginMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginMenuItemActionPerformed
    (new LoginDialog(this, true)).setVisible(true);
}//GEN-LAST:event_loginMenuItemActionPerformed

private void registerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerMenuItemActionPerformed
    (new RegisterDialog(this, true)).setVisible(true);
}//GEN-LAST:event_registerMenuItemActionPerformed

private void logoutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutMenuItemActionPerformed
    Runnable logoutTask = new Runnable() {
        @Override
        public void run() {
            client.logout();
        }
    };

    (new Thread(logoutTask)).start();
}//GEN-LAST:event_logoutMenuItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (!loginMenuItem.isEnabled()) {
            Runnable logoutTask = new Runnable() {
                @Override
                public void run() {
                    client.logout();
                }
            };
            (new Thread(logoutTask)).start();
        }

        dispose();
    }//GEN-LAST:event_formWindowClosing

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        // TODO add your handling code here:
       String s= jTextField1.getText();
       StringBuilder sb= new StringBuilder("-");
       sb.append(s);
       String msg= sb.toString();
       client.send(msg);
       jTextField1.setText("");
       
    }//GEN-LAST:event_sendButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ClientUI(args).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JMenuItem loginMenuItem;
    private javax.swing.JMenuItem logoutMenuItem;
    private javax.swing.JMenuItem registerMenuItem;
    private javax.swing.JButton sendButton;
    // End of variables declaration//GEN-END:variables


    public void login(final String name, final String pwd) {
        Runnable loginTask = new Runnable() {
            @Override
            public void run() {
                String logged=client.login(name, pwd);
                if (logged.equals("F")){
                    JOptionPane.showMessageDialog(null, "Wrong user name or password", "Rejected Exception", JOptionPane.ERROR_MESSAGE);
                }
            }
        };

        (new Thread(loginTask)).start();
    }


    public void register(final String name, final String pwd) {
        Runnable loginTask = new Runnable() {
            @Override
            public void run() {
                String registered=client.register(name, pwd);
                switch (registered) {
                    case "registered":
                        JOptionPane.showMessageDialog(null, "registered successfully", "registeration", JOptionPane.INFORMATION_MESSAGE);
                        break;
                    case "Account exists":             
                        JOptionPane.showMessageDialog(null, "Account already exists! try again", "Rejected Exception", JOptionPane.ERROR_MESSAGE);
                        break;
                    default:
                        JOptionPane.showMessageDialog(null, "something wrong! try again", "Network Problem", JOptionPane.ERROR_MESSAGE);
                        break;
                }
            }
        };

        (new Thread(loginTask)).start();
    }

    public void updateAfterLogin(final String userName) {
        Runnable updateUI = new Runnable() {
            @Override
            public void run() {
                setTitle("File Catalog --- USER: " + userName);
                logoutMenuItem.setEnabled(true);
                loginMenuItem.setEnabled(false);
                registerMenuItem.setEnabled(false);
                sendButton.setEnabled(true);
            }
        };
        try {
            SwingUtilities.invokeAndWait(updateUI);
        } catch (InterruptedException | InvocationTargetException ex) {
            Logger.getLogger(ClientUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void updateAfterLogout() {
        Runnable updateUI = new Runnable() {
            @Override
            public void run() {
                setTitle("File Catalog");
                logoutMenuItem.setEnabled(false);
                loginMenuItem.setEnabled(true);
                registerMenuItem.setEnabled(true);
                sendButton.setEnabled(false);
            }
        };
        try {
            SwingUtilities.invokeAndWait(updateUI);
        } catch (InterruptedException | InvocationTargetException ex) {
            Logger.getLogger(ClientUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}

